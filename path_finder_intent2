/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   path_finder.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ccaballe <ccaballe@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/04/08 17:21:00 by ccaballe          #+#    #+#             */
/*   Updated: 2023/04/10 13:06:14 by ccaballe         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "so_long.h"

void	path_checker(t_game game)
{
	int		i;
	int		j;
	t_point	orig;
	t_point	*arr;

	i = -1;
	while (game.map.map[++i])
	{
		j = -1;
		while (game.map.map[i][++j])
		{
			if (game.map.map[i][j] == 'C')
			{
				arr = (t_point *)malloc(sizeof(t_point) * 1);
				if (!arr)
					ft_error(1, "ERROR: Memory problems\n");
				orig.row = i;
				orig.col = j;
				arr[0] = orig;
				find_path(game.map, arr, find_item(game.map, 'P'));
			}
		}
	}
	// find_path(game.map, find_item(game.map, 'P'), find_item(game.map, 'E'));
}

void	find_path(t_map map, t_point *arr, t_point dest)
{
	int		r;
	int		c;

	if (arr[0])
	{
		r = arr[0].row;
		c = arr[0].col;
		if (c > 0 && map.map[r][c - 1] != '1')
			arr = ft_addpoint('a', arr, map.map[r][c - 1]);
		if (r > 0 && map.map[r - 1][c] != '1')
			arr = ft_addpoint('a', arr, map.map[r - 1][c]);
		if (c < map.len && map.map[r][c + 1] != '1')
			arr = ft_addpoint('a', arr, map.map[r][c + 1]);
		if (r < map.heig && map.map[r + 1][c] != '1')
			arr = ft_addpoint('a', arr, map.map[r + 1][c]);
		arr = ft_addpoint('d', arr, arr[0]);
		if (dest_in_arr(arr, dest))
			return ;
		find_path(map, arr, arr[0], dest);
	}
	ft_error(1, "ERROR\nNo valid path found\n");
}

t_point	*ft_addpoint(char c, t_point *arr, t_point point)
{
	t_point	*new_arr;
	int		i;

	i = 0;
	while (arr[i])
		i++;
	new_arr = (t_point *)calloc((sizeoft_point) * (i + 1));
	if (!new_arr)
		ft_error(1, "ERROR: Memory problems\n");
	if (c == 'a')
	{
		i = -1;
		while (arr[++i])
			new_arr[i] = arr[i];
		new_arr[i] = point;
	}
	else
	{
		i = 0;
		while (arr[++i])
			new_arr[i - 1] = arr[i];
	}
	free(arr);
	return (new_arr);
}

t_point	find_item(t_map map, char item)
{
	int		i;
	int		j;
	t_point	p;

	i = -1;
	while (map.map[++i])
	{
		j = -1;
		while (map.map[i][++j])
		{
			if (map.map[i][j] == item)
			{
				p.row = i;
				p.col = j;
				return (p);
			}
		}
	}
	return (NULL);
}

int	dest_in_arr(t_point *arr, t_point dest)
{
	int	i;

	i = 0;
	while (arr[i])
	{
		if (arr[i].row == dest.row && arr[i].col == dest.col)
			return (1);
		i++;
	}
	return (0);
}
